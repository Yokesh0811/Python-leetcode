LEETCODE - PRACTICED SUMS

-----PALINDROME NUMBERS-----

class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        return str(x) == str(x)[::-1]
     
     
-----TWO SUMS-----

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        for i in range(n-1):
            for j in range(i+1, n):
                if nums[i] + nums[j] == target:
                    return [i, j]
        return []
     
     
-----FIND THE DUPLICATE NUMBER-----

def findDuplicate(self, nums: List[int]) -> int:
    actual_sum = sum(nums)
    expected_sum = len(nums) * (len(nums) - 1) // 2
    return actual_sum - expected_sum
    
if __name__ == '__main__':
     nums = [1, 2, 3, 2, 4]
     print('The duplicate element is', findDuplicate(nums))        
     
     
-----REMOVE DUPLICATE-----

def removeDuplicate(nums):
    nums[:] = sorted(set(nums))
    print('List after the removal of duplicate numbers:',nums)
    print('current length of list:',len(nums))

if __name__ == '__main__':
    nums = [1, 2, 1, 3, 2, 4, 2, 4, 5]
    removeDuplicate(nums)
    
    
-----FIND LEAP YEAR-----

year = int(input("Enter Year:"))
if (year%400 == 0) or (year%4==0 and year%100!=0):
    print("Leap Year")
else:
    print("Not a Leap Year")


-----CHECK FOR ANAGRAM-----

string1 = input('enter the string one: ')
string2 = input('enter the string two: ')

if len(string1) != len(string2):
    print('not an Anagram')
else:
    string1 = sorted(string1)
    string2 = sorted(string2)
    if string1 == string2:
        print('Anagram')
    else:
        print('not an Anagram')


-----CONTAINER WITH MOST WATER-----

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l, r, area = 0, len(height) - 1, 0
        while l<r:
            area = max(area, (r - l) * min(height[l], height[r]))
            if height[l] < height[r]:
                l+=1
            else:
                r-=1
        return area


-----INTEGER TO ROMAN NUMBER-----

class Solution:
    def intToRoman(self, num: int) -> str:
        roman_nums = {
            1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6:'VI',7:'VII', 8:'VIII', 9: 'IX', 10: 'X',40:'XL', 50: 'L',90: 'XC', 100: 'C',400: 'CD', 500: 'D',900: 'CM', 1000: 'M', 
        }
        box = ''
        for i in [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 8, 7 , 6,  5, 4, 3, 2, 1]:
            while i <=num:
                box += roman_nums[i]
                num-=i
        return box
